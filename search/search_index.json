{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Custom Unix Terminal","text":"<p>This document serves as an informational guide on how I've customized my terminal in macOS and Linux. It includes a variety of configurations, settings, and programs that enhance my productivity and improve my overall experience within the terminal environment. The document is divided into several sections, each focusing on a different aspect of terminal customization, such as shell frameworks, themes, resource files, plugins, and more.</p> <p>Disclaimer</p> <p>This guide assumes you have a basic understanding of the Unix terminal and are comfortable working with configuration files. If you're new to the terminal or need clarification on any of the instructions provided, I recommend proceeding with caution and seeking additional resources or assistance.</p>"},{"location":"#useful-programs","title":"Useful Programs","text":"<p>The following table consists of CLI programs that have been useful to me in my day-to-day work. These programs are divided into two categories: Third Party Package Managers (TPPM) and Native Package Managers (NPM).</p> <p>The TPPM section features programs that can be installed via package managers like Homebrew, Pip, Cargo, Npm, Gem, or Git(1). For each program, I've included a brief description, the operating systems it supports, and the package managers available for installation.</p> <ol> <li>While all of these programs can be installed manually with <code>git</code>, they will only be marked as such if it is recommended by the program's documentation, myself, or if it's the only available method.</li> </ol> <p>The NPM section lists programs that can be installed using the system's default package manager. Since I primarily use Debian and Arch-based Linux distributions, all the programs in this section are confirmed to be installable via\u00a0<code>apt</code>\u00a0or\u00a0<code>pacman</code>. For other Linux distributions, refer to Repology to see if the program is available via your distribution's package manager. Like the\u00a0TPPM\u00a0section, I've included additional information such as a brief description of each program and a link to its Repology page.</p> Third Party Package ManagerNative Package Manager Programs Description Applicable OS's Available Package Managers Is a Command Other Info .tmux Oh my tmux! My self-contained, pretty &amp; versatile tmux configuration made with. macOSLinux No Requires <code>tmux</code> to be installed. bandwhich Terminal bandwidth utilization tool. macOSLinux Yes bat A cat(1) clone with wings. macOSLinux Yes black The uncompromising Python code formatter. macOSLinux Yes cheat Cheat allows you to create and view interactive cheatsheets on the command-line. macOSLinux Yes codespell Check code for common misspellings. macOSLinux Yes coreutils These are the GNU core utilities. This package is the union of the GNU <code>fileutils</code>, <code>sh-utils</code>, and <code>textutils</code> packages. macOS Collection All GNU commands installed via coreutils, are the same as they are on Linux, but prefixed with a <code>g</code> (i.e. <code>gcp</code> for <code>cp</code>). duf Disk Usage/Free Utility - a better 'df' alternative. macOSLinux Yes eza A modern, maintained replacement for <code>ls</code>. macOSLinux Yes ffmpeg FFmpeg is a collection of libraries and tools to process multimedia content such as audio, video, subtitles and related metadata. macOSLinux Yes fzf A command-line fuzzy finder. macOSLinux Yes fzf-tab Replace zsh's default completion selection menu with fzf! macOSLinux No gallery-dl Command-line program to download image galleries and collections from several image hosting sites. macOSLinux Yes git Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals. macOSLinux Yes git-delta A syntax-highlighting pager for git, diff, and grep output macOSLinux No git-open Type <code>git open</code> to open the GitHub page or website for a repository in your browser. macOSLinux Yes<code>git open</code> gnupg The GNU Privacy Guard macOSLinux Yes<code>gpg</code> or <code>gpg2</code> htop Improved top (interactive process viewer). macOSLinux Yes imagemagick Use ImageMagick\u00ae to create, edit, compose, or convert digital images. It can read and write images in a variety of formats (over 200) including PNG, JPEG, GIF, WebP, HEIC, SVG, PDF, DPX, EXR and TIFF. macOSLinux Yes<code>magick</code> More info here. isort A Python utility / library to sort imports. macOSLinux Yes lazygit Simple terminal UI for git commands. macOSLinux Yes lynis Security and system auditing tool to harden systems. macOSLinux Yes Recommended install method: Git. ncdu ncdu (NCurses Disk Usage) is a curses-based version of the well-known 'du'. macOSLinux Yes neovim Vim-fork focused on extensibility and usability. macOSLinux No<code>nvim</code> prettier Code formatter for JavaScript, CSS, JSON, GraphQL, Markdown, YAML. macOSLinux Yes pstree List processes as a tree. macOSLinux Yes pipenv Python dependency management tool. macOSLinux Yes pipx Install and Run Python Applications in Isolated Environments. macOSLinux Yes pyenv Simple Python version management. macOSLinux Yes pylint It's not just a linter that annoys you! macOSLinux Yes shellcheck Shell script analysis tool. macOSLinux Yes shellharden Shellharden is a syntax highlighter and a tool to semi-automate the rewriting of scripts to ShellCheck conformance, mainly focused on quoting. macOSLinux Yes terminal-notifier Send macOS User Notifications from the command-line. macOSLinux No Also see the bgnotify plugin. tmux tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. macOSLinux trash-cli Command line interface to the freedesktop.org trashcan. macOSLinux Collection tree Display directories as trees (with optional color/HTML output). macOSLinux Yes tree-sitter Tree-sitter is a parser generator tool and an incremental parsing library. macOSLinux No wget Wget is a free utility for non-interactive download of files from the Web. macOSLinux Yes yt-dlp A feature-rich command-line audio/video downloader. macOSLinux Yes zip Compression and file packaging/archive utility. macOSLinux Yes zsh UNIX shell (command interpreter). macOSLinux No zsh-autosuggestions Fish-like autosuggestions for zsh. macOSLinux No Zsh must be installed.Install instructions. zsh-completions Additional completion definitions for Zsh. macOSLinux No Zsh must be installed. zsh-syntax-highlighting Fish shell like syntax highlighting for Zsh. macOSLinux No Zsh must be installed.Install instructions. <p>Applicable Operating Systems: Linux</p> Programs Description Number of Repository Families Featuring this Package Is a Command Other Info apt-listchanges Package change history notification tool. Yes Specific to Debian based distributions.Rarely used as a command. bandwhich Terminal bandwidth utilization tool. Yes bat-cat A cat(1) clone with wings. Yes<code>bat</code> or <code>batcat</code> or <code>bat-cat</code> black The uncompromising Python code formatter. Yes Recommended install method: Homebrew OR Pip. codespell Check code for common misspellings. Yes deborphan Program that can find unused packages, e.g. libraries. Yes Specific to Debian based distributions. duf Disk Usage/Free Utility - a better 'df' alternative. Yes eza A modern, maintained replacement for <code>ls</code>. Yes For the apt package installation, see here. ffmpeg FFmpeg is a collection of libraries and tools to process multimedia content such as audio, video, subtitles and related metadata. ??? fzf A command-line fuzzy finder. Yes Recommended install method: Git OR Oh My Zsh gallery-dl Command-line program to download image galleries and collections from several image hosting sites. Yes git Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals. Yes git-delta A syntax-highlighting pager for git, diff, and grep output No gnupg The GNU Privacy Guard Yes<code>gpg</code> or <code>gpg2</code> htop A cross-platform interactive process viewer. Yes imagemagick Use ImageMagick\u00ae to create, edit, compose, or convert digital images. It can read and write images in a variety of formats (over 200) including PNG, JPEG, GIF, WebP, HEIC, SVG, PDF, DPX, EXR and TIFF. Yes<code>magick</code> More info here.Recommended install method: Homebrew. lazygit Simple terminal UI for git commands. Yes lynis Security and system auditing tool to harden systems. Yes Recommended install method: Git. ncdu ncdu (NCurses Disk Usage) is a curses-based version of the well-known 'du'. Yes neovim Vim-fork focused on extensibility and usability. Yes<code>nvim</code> pstree List processes as a tree. Yes pipenv Python dependency management tool. Yes pipx Install and Run Python Applications in Isolated Environments. Yes Recommended install method: Homebrew OR Pip. python-is-python3 symlinks /usr/bin/python to python3. nan No shellcheck Shell script analysis tool. Yes tmux tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. Yes trash-cli Command line interface to the freedesktop.org trashcan. Collection Recommended install method: Homebrew OR Pip. tree Display directories as trees (with optional color/HTML output). nan Yes yt-dlp A feature-rich command-line audio/video downloader. Yes zip Compression and file packaging/archive utility. Yes zsh UNIX shell (command interpreter). No zsh-autosuggestions Fish-like autosuggestions for zsh. No Not a command.Zsh must be installed.Recommended install method: Git. zsh-completions Additional completion definitions for Zsh. No Not a command.Zsh must be installed. Recommended install method: Git. zsh-syntax-highlighting Fish shell like syntax highlighting for Zsh. No Not a command.Zsh must be installed.Recommended install method: Git."},{"location":"#z-shell-zsh","title":"Z Shell (Zsh)","text":"<p>The Z shell, or <code>zsh</code>, is a powerful and feature-rich shell that offers many improvements over the default shells provided by most Unix-based operating systems. It includes advanced features such as improved tab completion, spelling correction, and shared command history, making it a popular choice among developers and power users. This section covers the shell framework, theme, resource file, plugins, and aliases that I use to customize my <code>zsh</code> environment.</p>"},{"location":"#shell-framework","title":"Shell Framework","text":"<p>A framework makes customizing the shell much more manageable, whether it be through plugins or themes. I often prefer complete control over my configurations, but the convenience provided by a framework has dramatically improved my workflow and ease of management.</p> <p>Due to its popularity, reliability, and consistent updates, my framework of choice has become oh-my-zsh. As one of the leading <code>zsh</code> frameworks, it made its initial commit on August 23, 2009, allowing it enough time to improve and refine its features.</p>"},{"location":"#shell-theme","title":"Shell Theme","text":"<p>Similar to how a shell framework enhances the shell's functionality, a shell theme improves its appearance and user experience. A well-designed theme can provide valuable information at a glance, such as the current directory, git branch, and other relevant details.</p> <p>My preferred shell theme is Starship, which draws inspiration from several well-known and popular shell themes. It is written in Rust, making it fast, lightweight, and highly customizable. Starship is designed to support a wide range of shells and external tools, making it a versatile choice for users across different platforms.</p> <p>Before Starship, I used Powerlevel10k, which is another excellent shell theme. However, as of May 21, 2024, Powerlevel10k has entered a \"life support\" mode. In the maintainer's words, \"The project has very limited support\", with \"no new features [in the works]\", \"most bugs will go unfixed\", and \"help requests will be ignored\". As a result, I searched for an alternative and found Starship to be a suitable replacement.</p>"},{"location":"#zsh-resource-file","title":"Zsh Resource File","text":"<p>The <code>.zshrc</code> file is where all the configurations for <code>zsh</code> are stored. It's the primary resource file for customizing the shell, containing settings, aliases, and other configurations that define its behavior and appearance.</p> <p>Below is the content of my <code>.zshrc</code> file, divided into two sections: one for macOS and one for Linux. Each section is tailored to its respective operating system. You're welcome to use this resource however you like. I offer it as a guide for structuring your own <code>.zshrc</code> file and to present additional configurations not detailed elsewhere in this document.</p> My Zsh Resource File macOSLinux .zshrc<pre><code>####[ Oh-My-Zsh Configurations ]########################################################\n\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n#ZSH_THEME=\"\"\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=true\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Disable audo updates for ohmyzsh. This is taken care of by chezmoi.\nDISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\nHIST_STAMPS=\"yyyy-mm-dd\"\n\n# Which plugins would you like to load?\n# Standard plugins can be found in ~/.oh-my-zsh/plugins/*\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\n# MAYBE: Add `command-not-found` plugin.\nplugins=(colored-man-pages copybuffer copypath copyfile bgnotify)\n\n\n####[ Pre `compinit` ]##################################################################\n#### These are configurations that have to be set before the `compinit` function is\n#### called, which is done when sourcing the 'oh-my-zsh.sh' file.\n\n\n## Zsh plugin for completions.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nzsh_completion=\"${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src\"\n[[ -d $zsh_completion ]] &amp;&amp; fpath+=${zsh_completion}\n\n# Rustup completions.\n# $ rustup completions zsh &gt; ~/.zfunc/_rustup\n[[ -f ~/.zfunc/_rustup ]] &amp;&amp; fpath+=~/.zfunc\n\n\n####[ Source Oh-My-Zsh ]################################################################\n\n\nsource \"$ZSH/oh-my-zsh.sh\"\n\n\n####[ Aliases ]#########################################################################\n\n\n###\n### [ Group 1 ]\n###\n\n## General aliases.\nalias ic=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs\"\nalias edisk=\"cd /Volumes &amp;&amp; ll\"\nalias zls=\"eza\"\nalias rmdsstore=\"find . -name '*.DS_Store' -type f -delete\"\nalias code=\"open -a 'Visual Studio Code.app' .\"\nalias formatc=\"find . -name '*.cs' -type f -exec clang-format --style='file:$HOME/Programs/Mine/Formatter Configs/CSharp_clang-format/_clang-format' -i {} +\"\nalias deletelocalbranches=\"git branch | grep -v 'main' | xargs git branch -D\"\n\n## Update based aliases.\nalias updatebrew=\"brew update &amp;&amp; brew upgrade &amp;&amp; brew autoremove &amp;&amp; brew cleanup &amp;&amp; brew doctor\"\n\n###\n### [ Group 2 ]\n###\n### Due to the number of commands that I find to be useful, I've created aliases\n### containing some of these commands. They are specifically commands that I don't\n### often use, but are useful to have on hand. Having these aliases allows me to see\n### a list of these commands, without having to commit them to memory.\n###\n\nalias lt=\"echo -e \\\"\n####[ Installed Commands ]##############################################################\n\nbandwhich  - Terminal bandwidth utilization tool.\nbat        - A cat(1) clone with wings.\ncheat      - Allows you to create and view interactive cheatsheets on the command-line.\ncodespell  - Check code for common misspellings.\nduf        - Disk Usage/Free Utility - a better 'df' alternative.\nfzf        - A command-line fuzzy finder.\nncdu       - ncdu (NCurses Disk Usage) is a curses-based version of the well-known 'du'.\npstree     - List processes as a tree.\ntmux       - Terminal multiplexer.\n\n####[[ Grouped Commands ]]##############################################################\n\nlt_conversion - List of programs used for converting the formats of videos, images, etc.\nlt_git        - List of programs used for git related commands.\n\n\n####[ Keyboard Combinations ]###########################################################\n\nCtrl + O - Allows you to copy what you are currently typing, via 'Ctrl' + 'O'.\n\\\"\"\nalias lt_conversion=\"echo -e \\\"\n####[ Image and Video Formatters ]######################################################\n\nffmpeg - FFmpeg is a collection of libraries and tools to process multimedia content.\nmagick - Convert between image formats as well as resize an image, blur, crop,\n         despeckle, dither, draw on, flip, join, re-sample, and much more.\n\\\"\"\nalias lt_git=\"echo -e \\\"\n####[ Git Related Commands ]############################################################\n\nlazygit  - Simple terminal UI for git commands.\ngit open - Opens the GitHub page for a repo/branch in your browser.\n\\\"\"\n\n\n####[ Environmental Variables ]#########################################################\n\n\n# 1Password auth socket.\nexport SSH_AUTH_SOCK=\"$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\"\n\n# Path purpose:\n#   /usr/local/opt/curl/bin:       ...\n#   /usr/local/sbin:               ???\n#   /usr/local/opt/openjdk@17/bin: Prefered java version.\n#   /usr/local/opt/node@18/bin:    Prefered node version.\n#   /usr/local/opt/ruby/bin:       Prefered ruby version.\nexport PATH=\"/usr/local/opt/curl/bin:/usr/local/sbin:/usr/local/opt/openjdk@17/bin:/usr/local/opt/node@18/bin:/usr/local/opt/ruby/bin:$PATH\"\n\n# Modifies the colors of files and directories when using `ls`.\nexport LSCOLORS=\"exgxfxDxcxegDaabagacaD\"\n## Version of LSCOLORS compatible with zsh and GNU based commands.\n## You can find more information about LS_COLORS and why it's needed in addition to\n## LSCOLORS, here: https://github.com/ohmyzsh/ohmyzsh/issues/6060#issuecomment-327934559\nexport LS_COLORS=\"di=34:ln=36:so=35:pi=1;33:ex=32:bd=34;46:cd=1;33;40:su=30;41:sg=30;46:tw=30;42:ow=30;1;43\"\n\n## Set default editor.\nif hash nvim 2&gt;/dev/null; then\n    export EDITOR=nvim\n    export VISUAL=$EDITOR\nfi\n\n# Node Version Manager (NVM) configurations.\nexport NVM_DIR=\"$HOME/.nvm\"\n\n\n####[ Sourced Files ]###################################################################\n\n\n## Load NVM.\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n## Zsh plugin for syntax highlighting.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nzsh_syntax_highlighting=\"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\"\n[[ -f $zsh_syntax_highlighting ]] &amp;&amp; source \"$zsh_syntax_highlighting\"\n\n## Zsh plugin for autosuggestions.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nzsh_autosuggestions=\"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\"\n[[ -f $zsh_autosuggestions ]] &amp;&amp; source \"$zsh_autosuggestions\"\n\n## Zsh plugin for fzf-tab.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nfzf_tab=\"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab/fzf-tab.plugin.zsh\"\n[[ -f $fzf_tab ]] &amp;&amp; hash fzf 2&gt;/dev/null &amp;&amp; source \"$fzf_tab\"\n\n## Source the plugins.sh file for the `op` command.\n[[ -f $HOME/.config/op/plugins.sh ]] \\\n    &amp;&amp; source \"$HOME/.config/op/plugins.sh\"\n\n\n####[ Zsh Style Configurations ]########################################################\n\n\n# Disable sort when completing `git checkout`.\nzstyle ':completion:*:git-checkout:*' sort false\n# Set descriptions format to enable group support.\n# NOTE: Don't use escape sequences here, fzf-tab will ignore them.\nzstyle ':completion:*:descriptions' format '[%d]'\n# Set list-colors to enable filename colorizing.\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n## Preview directory's content with `eza` when completing `cd`.\nhash eza 2&gt;/dev/null \\\n    &amp;&amp; zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'\n# Switch group using `&lt;` and `&gt;`.\nzstyle ':fzf-tab:*' switch-group '&lt;' '&gt;'\n\n\n####[ End of File Configurations ]######################################################\n#### These are configurations that are specified to be placed at the end of the file, by\n#### the developer/documentation.\n\n\n# Initialize Starship prompt, if it is installed and $ZSH_THEME is not set.\nhash starship 2&gt;/dev/null \\\n    &amp;&amp; [[ -z $ZSH_THEME ]] \\\n    &amp;&amp; eval \"$(starship init zsh)\"\n\n\n####[ Others ]##########################################################################\n#### These are generally configurations set up by setup scripts or other programs.\n</code></pre> .zshrc<pre><code>####[ Oh-My-Zsh Configurations ]########################################################\n\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n#ZSH_THEME=\"\"\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=true\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Disable audo updates for ohmyzsh. This is taken care of by chezmoi.\nDISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\nHIST_STAMPS=\"yyyy-mm-dd\"\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\n#plugins=(colored-man-pages copybuffer copypath copyfile bgnotify command-not-found)  # Desktop\nplugins=(colored-man-pages command-not-found)  # Server\n\n\n####[ Pre `compinit` ]##################################################################\n#### These are configurations that have to be set before the `compinit` function is\n#### called, which is done when sourcing the 'oh-my-zsh.sh' file.\n\n\n## Zsh plugin for completions.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nzsh_completion=\"${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src\"\n[[ -d $zsh_completion ]] &amp;&amp; fpath+=${zsh_completion}\n\n# Rustup completions.\n# $ rustup completions zsh &gt; ~/.zfunc/_rustup\n[[ -f ~/.zfunc/_rustup ]] &amp;&amp; fpath+=~/.zfunc\n\n\n####[ Source Oh-My-Zsh ]################################################################\n\n\nsource \"$ZSH/oh-my-zsh.sh\"\n\n\n####[ Aliases ]#########################################################################\n\n\n###\n### [ Group 1 ]\n###\n\n## General aliases.\nalias zls=\"eza\"\nalias formatc=\"find . -name '*.cs' -type f -exec clang-format --style='file:$HOME/Programs/Mine/Formatter Configs/CSharp_clang-format/_clang-format' -i {} +\"\nalias update-grub-config=\"sudo grub-mkconfig -o /boot/grub/grub.cfg\"\nalias deletelocalbranches=\"git branch | grep -v 'main' | xargs git branch -D\"\nhash xdg-open 2&gt;/dev/null &amp;&amp; alias open=\"xdg-open\"\n\n## Update based aliases.\nalias updateapt=\"sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt autoremove -y &amp;&amp; sudo apt autoclean\"\nalias updatepacman=\"sudo pacman -Syu &amp;&amp; yay &amp;&amp; yay -Yc &amp;&amp; update-grub-config\"\n\n## Systemd aliases.\nalias start-bluetooth=\"sudo systemctl start bluetooth.service\"\nalias stop-bluetooth=\"sudo systemctl stop bluetooth.service\"\nalias start-vmware-networking=\"sudo systemctl start vmware-networks.service\"\nalias stop-vmware-networking=\"sudo systemctl stop vmware-networks.service\"\nalias start-firewalld=\"sudo systemctl start firewalld.service\"\nalias stop-firewalld=\"sudo systemctl stop firewalld.service\"\n\n###\n### [ Group 2 ]\n###\n### Due to the number of commands that I find to be useful, I've created aliases\n### containing some of these commands. They are specifically commands that I don't\n### often use, but are useful to have on hand. Having these aliases allows me to see\n### a list of these commands, without having to commit them to memory.\n###\n\nalias lt=\"echo -e \\\"\n####[ Installed Commands ]##############################################################\n\nbandwhich  - Terminal bandwidth utilization tool.\nbat        - A cat(1) clone with wings.\ncheat      - Allows you to create and view interactive cheatsheets on the command-line.\ncodespell  - Check code for common misspellings.\nduf        - Disk Usage/Free Utility - a better 'df' alternative.\nfzf        - A command-line fuzzy finder.\nncdu       - ncdu (NCurses Disk Usage) is a curses-based version of the well-known 'du'.\npstree     - List processes as a tree.\ntmux       - Terminal multiplexer.\n\n####[[ Grouped Commands ]]##############################################################\n\nlt_conversion - List of programs used for converting the formats of videos, images, etc.\nlt_git        - List of programs used for git related commands.\n\n\n####[ Keyboard Combinations ]###########################################################\n\nCtrl + O - Allows you to copy what you are currently typing, via 'Ctrl' + 'O'.\n\\\"\"\nalias lt_conversion=\"echo -e \\\"\n####[ Image and Video Formatters ]######################################################\n\nffmpeg - FFmpeg is a collection of libraries and tools to process multimedia content.\nmagick - Convert between image formats as well as resize an image, blur, crop,\n         despeckle, dither, draw on, flip, join, re-sample, and much more.\n\\\"\"\nalias lt_git=\"echo -e \\\"\n####[ Git Related Commands ]############################################################\n\nlazygit  - Simple terminal UI for git commands.\ngit open - Opens the GitHub page for a repo/branch in your browser.\n\\\"\"\n\n\n####[ Environmental Variables ]#########################################################\n\n\n## Path purpose:\n##   $HOME/.local/bin:      User installed binaries.\n##   /opt/nvim-linux64/bin: Neovim binary.\nexport PATH=\"$HOME/.local/bin:$PATH\"\n[[ -d /opt/nvim-linux64/bin ]] &amp;&amp; export PATH=\"/opt/nvim-linux64/bin:$PATH\"\n\n# Modifies the colors of files and directories in the terminal.\nexport LS_COLORS=\"di=34:ln=36:so=35:pi=1;33:ex=32:bd=34;46:cd=1;33;40:su=30;41:sg=30;46:tw=30;42:ow=30;1;43\"\n\n## Set default editor.\nif hash nvim 2&gt;/dev/null; then\n    export EDITOR=nvim\n    export VISUAL=$EDITOR\nfi\n\n# Node Version Manager (NVM) configurations.\nexport NVM_DIR=\"$HOME/.nvm\"\n\n\n####[ Sourced Files ]###################################################################\n\n\n## Load NVM.\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n## Zsh plugin for syntax highlighting.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nzsh_syntax_highlighting=\"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\"\n[[ -f $zsh_syntax_highlighting ]] &amp;&amp; source \"$zsh_syntax_highlighting\"\n\n## Zsh plugin for autosuggestions.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nzsh_autosuggestions=\"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\"\n[[ -f $zsh_autosuggestions ]] &amp;&amp; source \"$zsh_autosuggestions\"\n\n## Zsh plugin for fzf-tab.\n## This plugin is installed via chezmoi, specified in the '.chezmoiexternal.toml' file.\nfzf_tab=\"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab/fzf-tab.plugin.zsh\"\n[[ -f $fzf_tab ]] &amp;&amp; hash fzf 2&gt;/dev/null &amp;&amp; source \"$fzf_tab\"\n\n## Source the plugins.sh file for the `op` command.\n[[ -f $HOME/.config/op/plugins.sh ]] \\\n    &amp;&amp; source \"$HOME/.config/op/plugins.sh\"\n\n\n####[ Zsh Style Configurations ]########################################################\n\n\n# Disable sort when completing `git checkout`.\nzstyle ':completion:*:git-checkout:*' sort false\n# Set descriptions format to enable group support.\n# NOTE: Don't use escape sequences here, fzf-tab will ignore them.\nzstyle ':completion:*:descriptions' format '[%d]'\n# Set list-colors to enable filename colorizing.\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n## Preview directory's content with `eza` when completing `cd`.\nhash eza 2&gt;/dev/null \\\n    &amp;&amp; zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'\n# Switch group using `&lt;` and `&gt;`.\nzstyle ':fzf-tab:*' switch-group '&lt;' '&gt;'\n\n\n####[ End of File Configurations ]######################################################\n#### These are configurations that are specified to be placed at the end of the file, by\n#### the developer/documentation.\n\n\n# Initialize Starship prompt, if it is installed and $ZSH_THEME is not set.\nhash starship 2&gt;/dev/null \\\n    &amp;&amp; [[ -z $ZSH_THEME ]] \\\n    &amp;&amp; eval \"$(starship init zsh)\"\n\n\n####[ Others ]##########################################################################\n#### These are generally configurations set up by setup scripts or other programs.\n</code></pre>"},{"location":"#oh-my-zsh-plugins","title":"Oh-my-zsh Plugins","text":"<p><code>oh-my-zsh</code> provides more than 325 built-in plugins that are regularly updated and maintained by the community. These plugins offer a wide range of features, from syntax highlighting and auto-completion to git integration and directory navigation.</p> <p>Below are all the plugins that I use, along with a brief description of their functionality:</p> Plugins Description Is a Command Other Info colored-man-pages Adds colors to man pages No copybuffer Allows you to copy what you are currently typing, via Ctrl+O Yes/No Key Combination: Ctrl+O copypath Copies the path of your working directory Yes copyfile Copies the contents of a file Yes bgnotify cross-platform background notifications for long running commands Yes/No Extra install instructions command-not-found This plugin uses the command-not-found package for zsh to provide suggested packages to be installed if a command cannot be found. No"},{"location":"#aliases","title":"Aliases","text":"<p>Many frameworks, such as <code>oh-my-zsh</code>, provide their own set of aliases to simplify and improve common commands. Any CLI user will tell you that aliases are a powerful tool for increasing productivity and efficiency. They allow you to create shortcuts for frequently used commands, reducing the time and effort required to type them out.</p> <p>Below are aliases I've create, organized into two groups: Group 1 and Group 2. Group 1 contains general aliases, while Group 2 includes aliases for displaying useful programs I don't frequently use and often forget about.</p> macOSLinux .zshrc<pre><code>####[ Aliases ]#########################################################################\n\n\n###\n### [ Group 1 ]\n###\n\n## General aliases.\nalias ic=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs\"\nalias edisk=\"cd /Volumes &amp;&amp; ll\"\nalias zls=\"eza\"\nalias rmdsstore=\"find . -name '*.DS_Store' -type f -delete\"\nalias code=\"open -a 'Visual Studio Code.app' .\"\nalias formatc=\"find . -name '*.cs' -type f -exec clang-format --style='file:$HOME/Programs/Mine/Formatter Configs/CSharp_clang-format/_clang-format' -i {} +\"\nalias deletelocalbranches=\"git branch | grep -v 'main' | xargs git branch -D\"\n\n## Update based aliases.\nalias updatebrew=\"brew update &amp;&amp; brew upgrade &amp;&amp; brew autoremove &amp;&amp; brew cleanup &amp;&amp; brew doctor\"\n\n###\n### [ Group 2 ]\n###\n### Due to the number of commands that I find to be useful, I've created aliases\n### containing some of these commands. They are specifically commands that I don't\n### often use, but are useful to have on hand. Having these aliases allows me to see\n### a list of these commands, without having to commit them to memory.\n###\n\nalias lt=\"echo -e \\\"\n####[ Installed Commands ]##############################################################\n\nbandwhich  - Terminal bandwidth utilization tool.\nbat        - A cat(1) clone with wings.\ncheat      - Allows you to create and view interactive cheatsheets on the command-line.\ncodespell  - Check code for common misspellings.\nduf        - Disk Usage/Free Utility - a better 'df' alternative.\nfzf        - A command-line fuzzy finder.\nncdu       - ncdu (NCurses Disk Usage) is a curses-based version of the well-known 'du'.\npstree     - List processes as a tree.\ntmux       - Terminal multiplexer.\n\n####[[ Grouped Commands ]]##############################################################\n\nlt_conversion - List of programs used for converting the formats of videos, images, etc.\nlt_git        - List of programs used for git related commands.\n\n\n####[ Keyboard Combinations ]###########################################################\n\nCtrl + O - Allows you to copy what you are currently typing, via 'Ctrl' + 'O'.\n\\\"\"\nalias lt_conversion=\"echo -e \\\"\n####[ Image and Video Formatters ]######################################################\n\nffmpeg - FFmpeg is a collection of libraries and tools to process multimedia content.\nmagick - Convert between image formats as well as resize an image, blur, crop,\n         despeckle, dither, draw on, flip, join, re-sample, and much more.\n\\\"\"\nalias lt_git=\"echo -e \\\"\n####[ Git Related Commands ]############################################################\n\nlazygit  - Simple terminal UI for git commands.\ngit open - Opens the GitHub page for a repo/branch in your browser.\n\\\"\"\n</code></pre> .zshrc<pre><code>####[ Aliases ]#########################################################################\n\n\n###\n### [ Group 1 ]\n###\n\n## General aliases.\nalias zls=\"eza\"\nalias formatc=\"find . -name '*.cs' -type f -exec clang-format --style='file:$HOME/Programs/Mine/Formatter Configs/CSharp_clang-format/_clang-format' -i {} +\"\nalias update-grub-config=\"sudo grub-mkconfig -o /boot/grub/grub.cfg\"\nalias deletelocalbranches=\"git branch | grep -v 'main' | xargs git branch -D\"\nhash xdg-open 2&gt;/dev/null &amp;&amp; alias open=\"xdg-open\"\n\n## Update based aliases.\nalias updateapt=\"sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt autoremove -y &amp;&amp; sudo apt autoclean\"\nalias updatepacman=\"sudo pacman -Syu &amp;&amp; yay &amp;&amp; yay -Yc &amp;&amp; update-grub-config\"\n\n## Systemd aliases.\nalias start-bluetooth=\"sudo systemctl start bluetooth.service\"\nalias stop-bluetooth=\"sudo systemctl stop bluetooth.service\"\nalias start-vmware-networking=\"sudo systemctl start vmware-networks.service\"\nalias stop-vmware-networking=\"sudo systemctl stop vmware-networks.service\"\nalias start-firewalld=\"sudo systemctl start firewalld.service\"\nalias stop-firewalld=\"sudo systemctl stop firewalld.service\"\n\n###\n### [ Group 2 ]\n###\n### Due to the number of commands that I find to be useful, I've created aliases\n### containing some of these commands. They are specifically commands that I don't\n### often use, but are useful to have on hand. Having these aliases allows me to see\n### a list of these commands, without having to commit them to memory.\n###\n\nalias lt=\"echo -e \\\"\n####[ Installed Commands ]##############################################################\n\nbandwhich  - Terminal bandwidth utilization tool.\nbat        - A cat(1) clone with wings.\ncheat      - Allows you to create and view interactive cheatsheets on the command-line.\ncodespell  - Check code for common misspellings.\nduf        - Disk Usage/Free Utility - a better 'df' alternative.\nfzf        - A command-line fuzzy finder.\nncdu       - ncdu (NCurses Disk Usage) is a curses-based version of the well-known 'du'.\npstree     - List processes as a tree.\ntmux       - Terminal multiplexer.\n\n####[[ Grouped Commands ]]##############################################################\n\nlt_conversion - List of programs used for converting the formats of videos, images, etc.\nlt_git        - List of programs used for git related commands.\n\n\n####[ Keyboard Combinations ]###########################################################\n\nCtrl + O - Allows you to copy what you are currently typing, via 'Ctrl' + 'O'.\n\\\"\"\nalias lt_conversion=\"echo -e \\\"\n####[ Image and Video Formatters ]######################################################\n\nffmpeg - FFmpeg is a collection of libraries and tools to process multimedia content.\nmagick - Convert between image formats as well as resize an image, blur, crop,\n         despeckle, dither, draw on, flip, join, re-sample, and much more.\n\\\"\"\nalias lt_git=\"echo -e \\\"\n####[ Git Related Commands ]############################################################\n\nlazygit  - Simple terminal UI for git commands.\ngit open - Opens the GitHub page for a repo/branch in your browser.\n\\\"\"\n</code></pre>"},{"location":"#modifying-cli-colors","title":"Modifying CLI Colors","text":"<p>You can customize the colors of folders, files, and other items in the terminal by setting the <code>LS_COLORS</code> or <code>LSCOLORS</code> environment variables.(1) Each variable uses a unique format to specify the colors and styles of different file types and directories. For more information regarding these variables, refer to the \"CLI Colors Explained\" drop-down.</p> <ol> <li>Linux only requires <code>LS_COLORS</code>, while macOS needs both <code>LS_COLORS</code> and <code>LSCOLORS</code> to be set.</li> </ol> CLI Colors Explained <p>Between macOS and Linux, there is a slight difference in how CLI colors are configured. macOS requires both <code>LSCOLORS</code> and <code>LS_COLORS</code> to fully enable and set CLI colors within the terminal. Conversely, Linux only needs <code>LS_COLORS</code> to achieve the same.</p> <p>This difference arises from the distinct version of the <code>ls</code> command on macOS and Linux. macOS employs the FreeBSD version of <code>ls</code>, which relies on <code>LSCOLORS</code> to define the color scheme for file and directory listings. In contrast, Linux uses the GNU version, which depends on <code>LS_COLORS</code> for the same purpose. On both systems, <code>LS_COLORS</code> is also used by shells like <code>zsh</code> to colorize other tools and utilities.</p> <p>Included below is a key that explains the values of <code>LSCOLORS</code>\u00a0and\u00a0<code>LS_COLORS</code> in my configurations:</p> LSCOLORS LS_COLORS Type Text Color Foreground/Background Color ex di=34 Directories blue default gx ln=36 Symbolic link cyan default fx so=35 Socket magenta default Dx pi=1;33 Pipe bold yellow default cx ex=32 Executable green default eg bd=34;46 Block special green cyan Da cd=1;33;40 Character special bold yellow black ab su=30;41 Executable with setuid bit set black red ag sg=30;46 Executable with setgid bit set black cyan ac tw=30;42 Directory writeable to others (with a sticky bit) black green aD ow=30;1;43 Directory writeable to others (without sticky bit) black bold yellow <p>I recommend visiting this gist for an in-depth understanding of the <code>LS_COLORS</code> and <code>LSCOLORS</code> values.</p> <p>The below configurations are my <code>LS_COLORS</code> and <code>LSCOLORS</code> settings for macOS and Linux. To use them, add the code to your <code>.zshrc</code> file:</p> macOSLinux CLI Color Configuration<pre><code># Modifies the colors of files and directories when using `ls`.\nexport LSCOLORS=\"exgxfxDxcxegDaabagacaD\"\n## Version of LSCOLORS compatible with zsh and GNU based commands.\n## You can find more information about LS_COLORS and why it's needed in addition to\n## LSCOLORS, here: https://github.com/ohmyzsh/ohmyzsh/issues/6060#issuecomment-327934559\nexport LS_COLORS=\"di=34:ln=36:so=35:pi=1;33:ex=32:bd=34;46:cd=1;33;40:su=30;41:sg=30;46:tw=30;42:ow=30;1;43\"\n\n# Set list-colors to enable filename colorizing.\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n</code></pre> CLI Color Configuration<pre><code># Modifies the colors of files and directories in the terminal.\nexport LS_COLORS=\"di=34:ln=36:so=35:pi=1;33:ex=32:bd=34;46:cd=1;33;40:su=30;41:sg=30;46:tw=30;42:ow=30;1;43\"\n\n# Set list-colors to enable filename colorizing.\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n</code></pre> <p>You can further modify the shading and appearance of CLI colors by adjusting the ANSI color scheme in your terminal profile. This can be done manually, with guides available for macOS and Linux (specific to GNOME). Alternatively, you can use my custom profile schemes, with instructions detailed in the Terminal Profile section.</p>"},{"location":"#text-editor","title":"Text Editor","text":"<p>There are many terminal-based text editors to choose from, each with unique features and capabilities. I've found that\u00a0Neovim\u00a0is the most powerful and versatile option for my needs.</p>"},{"location":"#neovim-resource-file","title":"Neovim Resource File","text":"<p>Like the <code>.zshrc</code> file for <code>zsh</code>, Neovim has its own resource file, located at <code>~/.config/nvim/init.vim</code>, where all the configurations for the editor are stored. This file contains settings, key mappings, and other configurations that define Neovim's behavior and appearance.</p> <p>Below is the content of my\u00a0<code>init.vim</code> file, divided into two sections: with plugins and without plugins. The former includes configurations for various plugins I use, while the latter is a more streamlined setup without any plugins. You can choose the configuration that best suits your needs and add it to your <code>~/.config/nvim/init.vim</code> file.</p> With PluginsWithout Plugins <p>I manage all of my Neovim plugins using vim-plug, a self-described minimalist Vim plugin manager. It simplifies the process of installing, updating, and removing plugins, making it easier to manage and maintain a large number of plugins. While other Vim package managers are available, my configurations are specifically tailored to <code>vim-plug</code>.</p> <p>To use these configurations, you'll first need to install vim-plug. Once installed, you can add the following code to your <code>init.vim</code> file. With <code>init.vim</code> open in Neovim, initiate the plugin installation by entering <code>:source %</code> (1) followed by <code>:PlugInstall</code>.</p> <ol> <li>When using <code>:source %</code>, you can safely ignore any errors that may appear, as they are most likely caused by Neovim searching for plugins that have yet to be installed.</li> </ol> init.vim<pre><code>\"\"\"\"[ vim-plug Configurations ]\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\ncall plug#begin(stdpath('data') . '/plugged')\n\" Make sure you use single quotes\n\n\" Vim help for vim-plug itself\nPlug 'junegunn/vim-plug'\n\n\" Rainbow delimiters for Neovim with Tree-sitter.\nPlug 'HiPhish/rainbow-delimiters.nvim'\n\" Lean &amp; mean status/tabline for vim that's light as air.\nPlug 'vim-airline/vim-airline'\n\" A collection of themes for vim-airline.\nPlug 'vim-airline/vim-airline-themes'\n\" Retro groove color scheme for Vim.\nPlug 'sainnhe/gruvbox-material'\n\" Check syntax in Vim asynchronously and fix files, with Language Server Protocol (LSP)\n\" support.\nPlug 'dense-analysis/ale'\n\" Better whitespace highlighting for Vim.\nPlug 'ntpeters/vim-better-whitespace'\n\" An incremental parsing system for programming tools.\nPlug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}\n\" Highlight columns in CSV and TSV files and run queries in SQL-like language.\nPlug 'mechatroner/rainbow_csv'\n\" A simple and lightweight Neovim plugin that brings syntax highlighting to generic log\n\" patterns and provides straight-forward configuration to manage the filetype detection\n\" rules over your preferred log files.\nPlug 'fei6409/log-highlight.nvim'\n\n\" Initialize plugin system\ncall plug#end()\n\"\n\" Brief help:\n\"   PlugInstall  - Install plugins\n\"   PlugUpdate   - Install or update plugins\n\"   PlugClean    - Remove unlisted plugins (bang version will clean without prompt)\n\"   PlugUpgrade  - Upgrade vim-plug itself\n\"   PlugStatus   - Check the status of plugins\n\"   PlugDiff     - Examine changes from the previous update and the pending changes\n\"   PlugSnapshot - Generate script for restoring the current snapshot of the plugins\n\n\n\"\"\"\"[ General Configurations ]\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n\"\"\"\n\"\"\" Overwrites specified default setting.\n\"\"\"\n\n\"\" Overwrite for all file types.\nset expandtab       \" Use spaces instead of tabs.\nset tabstop=4       \" Number of spaces that a &lt;Tab&gt; in the file counts for.\nset shiftwidth=4    \" Number of spaces to use for each step of (auto)indent.\nset softtabstop=4   \" Number of spaces that a &lt;Tab&gt; in the file counts for.\nset endofline       \" Keep the last line of a file if it has no newline.\nset fixendofline    \" Ensures a newline at the end of the file, if endofline is enabled.\nset colorcolumn=88  \" Set a colored line at column 88 in every row.\n\n\"\" Filetype-specific configurations.\nautocmd Filetype markdown,text,csv setlocal colorcolumn=0\nautocmd Filetype java setlocal colorcolumn=100\nautocmd Filetype cs setlocal colorcolumn=120\n\" As recommended by the luarocks Style Guide:\n\" https://github.com/luarocks/lua-style-guide/blob/master/README.md\nautocmd Filetype lua setlocal tabstop=3 shiftwidth=3 softtabstop=3\nautocmd Filetype html,css,vue,javascript,typescript setlocal colorcolumn=100 tabstop=2 shiftwidth=2 softtabstop=2\n\n\n\"\"\"\"[ vim-plug Plugin Configurations ]\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n\" Font: Power Line Font\nset guifont=MesloLGS_NF:h12\n\n\"\" Plugin: gruvbox-material\ncolorscheme gruvbox-material\nset background=dark\nlet g:gruvbox_material_foreground = 'original'\nlet g:gruvbox_material_enable_bold = 1\nlet g:gruvbox_material_enable_italic = 1\n\n\"\" Plugin: vim-airline\nlet g:airline#extensions#tabline#enabled = 1\nlet g:airline#extensions#tabline#left_sep = ' '\nlet g:airline#extensions#tabline#left_alt_sep = '|'\nlet g:airline#extensions#tabline#formatter = 'default'\nlet g:airline#extensions#ale#enabled = 1\nlet g:airline_powerline_fonts = 1\n\n\"\" Plugin: better-whitespace\nlet g:better_whitespace_enabled = 1\nlet g:strip_whitespace_on_save = 1\n\n\"\" Plugin: ale\n\"let g:ale_use_neovim_diagnostics_api = 0\n\n\n\"\"\"\"[ Lua Configurations ]\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n\" Load 'nvim-treesitter' configurations.\nlua dofile(vim.fn.stdpath('config') .. '/second_init.lua')\n\n\n\"\"\"\"[ Useful Commands ]\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n\" :NERDTree        - Opens NERDTree file system explorer.\n\" :StripWhitespace - Clean extra whitespace.\n\" :ALEInfo         - Show ALE information.\n\" :ALEToggle       - Toggle ALE on/off.\n\" :TSInstall       - Install treesitter parsers.\n\" :TSUpdate        - Update treesitter parsers.\n\" :TSInstallInfo   - Show treesitter information.\n</code></pre> <p>These configurations are designed for users who prefer a more straightforward setup without the features provided by plugins. They tweak Neovim's default settings without changing its core functionality, offering a more streamlined experience while preserving Vim's essential behavior.</p> init.vim<pre><code>\"\"\"\"[ General Configurations ]\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n\"\"\"\n\"\"\" Overwrites specified default setting.\n\"\"\"\n\n\"\" Overwrite for all file types.\nset expandtab       \" Use spaces instead of tabs.\nset tabstop=4       \" Number of spaces that a &lt;Tab&gt; in the file counts for.\nset shiftwidth=4    \" Number of spaces to use for each step of (auto)indent.\nset softtabstop=4   \" Number of spaces that a &lt;Tab&gt; in the file counts for.\nset endofline       \" Keep the last line of a file if it has no newline.\nset fixendofline    \" Ensures a newline at the end of the file, if endofline is enabled.\nset colorcolumn=88  \" Set a colored line at column 88 in every row.\n\n\"\" Filetype-specific configurations.\nautocmd Filetype markdown,text,csv setlocal colorcolumn=0\nautocmd Filetype java setlocal colorcolumn=100\nautocmd Filetype cs setlocal colorcolumn=120\n\" As recommended by the luarocks Style Guide:\n\" https://github.com/luarocks/lua-style-guide/blob/master/README.md\nautocmd Filetype lua setlocal tabstop=3 shiftwidth=3 softtabstop=3\nautocmd Filetype html,css,vue,javascript,typescript setlocal colorcolumn=100 tabstop=2 shiftwidth=2 softtabstop=2\n</code></pre>"},{"location":"#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Assumptions</p> <p>This section assumes you are using a plugin manager like <code>vim-plug</code>, or are comfortable installing plugins manually.</p> <p>Neovim leverages TreeSitter to provide features such as advanced syntax highlighting, offering more precision and speed than traditional regex-based methods. However, its default installation includes a limited set of parsers for programming languages. This is where the nvim-treesitter plugin shines. Acting as an enhanced interface for TreeSitter, <code>nvim-treesitter</code> provides:</p> <ul> <li>Parser Management: It automatically handles downloading, installing, and updating TreeSitter parsers for a wide range of languages.</li> <li>Enhanced Syntax Highlighting: With custom configurations, it delivers consistent and accurate syntax highlighting tailored to each language.</li> <li>Advanced Code Features: Besides highlighting, it enables and enhances features like structural code navigation, incremental selection, code folding, and extensions like rainbow parentheses.</li> </ul> <p>Below are my configurations for <code>nvim-treesitter</code>. Currently, they ensure that the specified parsers are automatically installed and loaded. To use these settings, add the following code to <code>~/.config/nvim/second_init.lua</code> (1):</p> <ol> <li> <p><code>nvim-treesitter</code> configurations are written in Lua. Therefore, if your primary <code>init</code> file is written in Vimscript, you must(1) place these configurations in a separate Lua file; I've named mine <code>second_init.lua</code>. My <code>init.vim</code> file, provided above, sources this Lua file to load the <code>nvim-treesitter</code> settings.</p> </li> <li> <p>Technically, you can place the Lua code within the <code>init.vim</code> file, but using a separate Lua file keeps the configurations organized and easier to manage.</p> </li> </ol> second_init.lua<pre><code>-- This file is loaded after and by 'init.vim', and contains additional configurations\n-- that require the use of lua.\n\n-- TODO: Add more configurations here.\nrequire('nvim-treesitter.configs').setup {\n   -- A list of parser names, or \"all\" (the listed parsers MUST always be installed).\n   ensure_installed = {\n      \"bash\",\n      \"c\",\n      \"comment\",\n      \"diff\",\n      --\"disassembly\",  -- Good to have on standbye.\n      \"dockerfile\",\n      \"editorconfig\",\n      \"git_config\",\n      \"git_rebase\",\n      \"gitattributes\",\n      \"gitcommit\",\n      \"gitignore\",\n      \"html\",\n      \"javascript\",\n      \"json\",\n      -- \"kconfig\",  -- Good to have on standbye.\n      \"lua\",\n      \"markdown\",\n      \"markdown_inline\",\n      \"php\",\n      --\"printf\",  -- Unsure how it will interact with the C and Bash parsers.\n      \"python\",\n      \"query\",\n      \"regex\",\n      \"requirements\",\n      \"rust\",\n      \"sql\",\n      --\"strace\",  -- Good to have on standbye.\n      --\"tmux\",  -- Maybe...\n      \"typescript\",\n      \"vim\",\n      \"vimdoc\",\n      \"vue\",\n      \"xml\",\n      \"yaml\",\n   },\n   highlight = {\n      enable = true,\n      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.\n      -- Set this to `true` if you depend on 'syntax' being enabled (like for\n      -- indentation). Using this option may slow down your editor, and you may see some\n      -- duplicate highlights. Instead of true it can also be a list of languages.\n      additional_vim_regex_highlighting = false,\n   },\n}\n</code></pre> <p>If you're\u00a0NOT\u00a0using the\u00a0<code>init.vim</code>\u00a0file I provided, you'll want to add the following line to your version of the file:</p> init.vim<pre><code>\" Load 'nvim-treesitter' configurations.\nlua dofile(vim.fn.stdpath('config') .. '/second_init.lua')\n</code></pre>"},{"location":"#terminal-profile","title":"Terminal Profile","text":"<p>A terminal profile is a set of configurations that define the visual appearance and behavior of the terminal window, including the color scheme, font style, and other visual elements. Customizing the terminal profile can improve the user experience, making the terminal more visually appealing and easier to work with.</p> macOSLinux <p>My custom profile is a modified version of the \"Basic\" profile that comes pre-installed on macOS. To add it to your list of profiles, follow the instructions below:</p> <ol> <li>Download the terminal profile: Basic (Modified).terminal</li> <li>Open a new terminal window.</li> <li>Import the profile:<ol> <li>Go to Preferences.</li> <li>Navigate to the Profiles tab.</li> <li>Click on the gear icon at the bottom left of the window.</li> <li>Select Import....</li> <li>Locate and select the downloaded Basic (Modified).terminal file.</li> </ol> </li> <li>Set as default profile:<ol> <li>Select the newly imported profile from the list.</li> <li>Click the Default button at the bottom of the window.</li> </ol> </li> </ol> <p>My custom profile is based on the one I use for macOS. To add it to your list of profiles, follow the instructions below:</p> <ol> <li>Download the terminal profile: Gnome Basic (Modified).dconf</li> <li>Download the profile setup script: terminal-profile-setup.bash</li> <li>Open a new terminal window.</li> <li>Navigate to the directory where both files were downloaded to (e.g., <code>~/Downloads</code>).</li> <li>Execute the setup script: <pre><code>chmod +x terminal-profile-setup.bash\n./terminal-profile-setup.bash\n</code></pre></li> </ol>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>Note</p> <p>Entries under the Removed section indicate items removed from the entire document unless specified otherwise. If an item is removed from a specific section, it will be specified in the entry.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#2024-12-20","title":"2024-12-20","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>fixed(.zshrc): fix spelling problems</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>added(zshrc): seperate update based variables</li> <li>added(alias): add new alias <code>deletelocalbranches</code></li> <li>added(alias): add <code>update-grub-config</code> to <code>updatepacman</code> alias</li> </ul>"},{"location":"changelog/#2024-12-02","title":"2024-12-02","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Several new aliases have been added to the linux <code>.zshrc</code> file:     <pre><code>alias update-grub-config=\"sudo grub-mkconfig -o /boot/grub/grub.cfg\"\n\n## Systemd aliases.\nalias start-bluetooth=\"sudo systemctl start bluetooth.service\"\nalias stop-bluetooth=\"sudo systemctl stop bluetooth.service\"\nalias start-vmware-networking=\"sudo systemctl start vmware-networks.service\"\nalias stop-vmware-networking=\"sudo systemctl stop vmware-networks.service\"\nalias start-firewalld=\"sudo systemctl start firewalld.service\"\nalias stop-firewalld=\"sudo systemctl stop firewalld.service\"\n</code></pre></li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Removed the <code>rrm</code> and <code>rm</code> aliases from the linux <code>.zshrc</code> file.</li> </ul>"},{"location":"changelog/#2024-11-28","title":"2024-11-28","text":"<p>This update includes a significant overhaul of several aspects of the project. As a result, only the major changes are listed below. The changes cover both the documentation and the repository as a whole.</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added the <code>dotfiles</code> submodule for easy access to shell and terminal configurations.</li> <li>Introduced <code>update_repo.py</code> to simplify updating <code>neovim</code>, <code>zsh</code>, and other configuration files by retrieving them from the <code>dotfiles</code> submodule.</li> <li>Created <code>update_submodule.bash</code> to automate updating the <code>dotfiles</code> submodule with the latest changes from the dotfiles repository.</li> <li>Added <code>terminal-profile-setup.bash</code> to automate the setup of the terminal profile on Linux (requires Gnome).</li> <li>Implemented a workflow that automates updating the <code>dotfiles</code> submodule via Dependabot.</li> <li>Added a new section regarding syntax highlighting for <code>neovim</code>.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Replaced the shell theme Powerlevel10k with Starship.</li> <li>Updated all code examples to reflect the latest changes.</li> <li>Reworked the Gnome Terminal Profile so it no longer overwrites existing profiles.</li> <li>Updated the wording and information in the main document.</li> <li>Improved the context of several sections.</li> </ul>"},{"location":"changelog/#2024-04-25","title":"2024-04-25","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added programs: <code>cheat</code>, <code>fzf-tab</code>, and <code>eza</code>.</li> <li>Included the <code>rainbow_csv</code> plugin (<code>mechatroner/rainbow_csv</code>) in <code>init.vim</code>.</li> <li>Updated and added new <code>zstyle</code> settings in <code>zshrc</code>; these are now located in a section called \"Zsh Style Configurations\".</li> <li>Added new sections in the README for future documentation.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Modified <code>zshrc</code> to check if <code>fzf</code> is installed before sourcing <code>fzf-tab</code>.</li> <li>Removed Azure autoload and source commands from <code>zshrc</code>.</li> <li>Added the recommended method of installing <code>fzf</code> on Linux in the README.</li> <li>Renamed several aliases and added a new alias for <code>eza</code>.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Eliminated <code>lsd</code>-based aliases.</li> <li>Removed the <code>PATH</code> variable from <code>zshrc</code>.</li> </ul>"},{"location":"changelog/#2024-04-22","title":"2024-04-22","text":"<p>This update is a major overhaul and rewrite of the entire repository. Due to the extensive changes, only the major updates are listed below.</p>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated the list of programs to better reflect those consistently used.</li> <li>Switched from using Vim to Neovim; all configurations and documentation have been updated accordingly.</li> <li>Updated the main configuration file (<code>init.vim</code>) for Neovim to reflect changes in programs and plugins.</li> <li>Updated and added new aliases.</li> <li>Rewrote 90% of the documentation to improve wording, clarity, and readability; added new sections and removed outdated ones.</li> <li>Added a notice section in the README to inform users to view the document on the website for the full content.</li> </ul>"},{"location":"changelog/#2023-06-27","title":"2023-06-27","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Added <code>vim-better-whitespace</code> plugin (<code>ntpeters/vim-better-whitespace</code>) to <code>vimrc</code>.</li> <li>Introduced new file-specific configurations in <code>vimrc</code>.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Updated the URL link of the website status badge in the README.</li> <li>Simplified repository maintenance by removing redundant files and replacing them with a single file used in multiple places, leveraging new features from updated dependencies and packages.</li> </ul>"},{"location":"changelog/#2022-08-25","title":"2022-08-25","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Added new aliases in <code>zshrc</code>.</li> <li>Included the <code>git</code> plugin in <code>zshrc</code>.</li> <li>Added specific configurations for Markdown and text files in <code>vimrc</code>.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Updated existing aliases in <code>zshrc</code>.</li> <li>Modified <code>.zshrc</code> to contain only general configurations, simplifying maintenance.</li> <li>Made slight wording and formatting changes in <code>vimrc</code>.</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Removed unnecessary code from <code>zshrc</code>.</li> <li>Eliminated programs <code>fd</code>/<code>fd-find</code> and <code>git-quick-stats</code>.</li> </ul>"},{"location":"changelog/#2022-07-17","title":"2022-07-17","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Added <code>YouCompleteMe</code> plugin (<code>valloric/youcompleteme</code>) to <code>vimrc</code>.</li> <li>Introduced new aliases in <code>zshrc</code>.</li> <li>Added a link to the repository of the newly added <code>vimrc</code> plugin in the README.</li> <li>Included comments on commands to download <code>zsh</code> plugins in <code>zshrc</code>.</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Made slight formatting changes in <code>vimrc</code>.</li> <li>Modified plugins and performed general refactoring in <code>zshrc</code>.</li> <li>Implemented several small changes throughout <code>zshrc</code>.</li> </ul>"},{"location":"changelog/#2022-05-26","title":"2022-05-26","text":""},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Removed code from the Linux <code>zshrc</code> files that wasn't considered general configurations.</li> <li>Added specific configurations for Markdown files in <code>vimrc</code>.</li> <li>Changed the website status badge in the README.</li> </ul>"},{"location":"changelog/#2022-05-24","title":"2022-05-24","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Set <code>LS_COLORS</code> in <code>zshrc</code> to match <code>LSCOLORS</code>.</li> <li>Added <code>set colorcolumn=89</code> in <code>vimrc</code>.</li> <li>Included a terminal profile for the Gnome terminal.</li> <li>Added programs: <code>fzf</code>, <code>zsh-completions</code>, and <code>gallery-dl</code>.</li> <li>Incorporated <code>zsh-autosuggestions</code> as an Oh My Zsh plugin, removing the need to source it.</li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Updated information in the Modifying CLI Colors section to include details about <code>LS_COLORS</code>.</li> <li>Improved wording and updated various small details throughout the document.</li> <li>Switched from Vundle to <code>vim-plug</code> for plugin management in <code>vimrc</code>; all references to Vundle have been updated.</li> <li>Adjusted <code>LSCOLOR</code> in <code>zshrc</code> from <code>exgxfxDxcxegDhabagacaD</code> to <code>exgxfxDxcxegDhabagacaD</code>.</li> <li>Created separate versions of the Linux <code>zshrc</code> file for desktop and server.</li> <li>Updated alias information in <code>aliases</code>.</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>Eliminated unneeded aliases and alias content.</li> <li>Removed programs: <code>bottom</code> and <code>hstr</code>.</li> </ul>"},{"location":"changelog/#2022-03-01","title":"2022-03-01","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Added comments to <code>mkdocs.yml</code>.</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Updated plugins, features, and extensions in <code>mkdocs.yml</code>.</li> <li>Bumped version numbers of all packages in <code>mkdocs-requirements.txt</code>.</li> <li>Updated deprecated <code>zsh</code> plugin <code>copydir</code> to <code>copypath</code> in <code>zshrc</code>.</li> <li>Adjusted the My .zshrc and My .vimrc sections in the README to display code from files in the <code>insides</code> folder.</li> </ul>"},{"location":"changelog/#2021-12-21","title":"2021-12-21","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Added programs: <code>git-quick-stats</code>, <code>pyenv</code>, <code>ffmpeg</code>, <code>asciinema</code>, <code>m-cli</code>, <code>.tmux</code>, <code>tmux</code>, and <code>imagemagick</code>.</li> <li>Included several other additions that enhance functionality.</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Updated the Custom Aliases and My .zshrc sections.</li> <li>Modified the terminal profile.</li> </ul>"},{"location":"changelog/#removed_4","title":"Removed","text":"<ul> <li>Removed programs: <code>duti</code>, <code>jq</code>, <code>Homebrew Command Not Found</code>, <code>symboliclinker</code>, <code>gistome</code>, <code>git-extras</code>, <code>pdfgrep</code>, <code>hub</code>, and <code>cloc</code>.</li> <li>Eliminated <code>tmux</code>, <code>wget</code>, and <code>tree</code>, as they are usually installed by default.</li> <li>Removed <code>jedi-vim</code> (<code>davidhalter/jedi-vim</code>) and <code>vim-fugitive</code> (<code>tpope/vim-fugitive</code>) from <code>vimrc</code>.</li> <li>Deleted <code>edkolev/tmuxline.vim</code> from the list of programs.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Improved wording and grammar throughout the <code>README.md</code>.</li> </ul>"},{"location":"changelog/#2021-06-05","title":"2021-06-05","text":"<p>This is the first release where all configurations and related content have been fully added.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2020-2024 Hunter T. (StrangeRanger)</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}